generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id            Int        @id @default(autoincrement())
  category_name String?    @unique(map: "category_name_UNIQUE") @db.VarChar(45)
  products      products[]
}

model credentials {
  id         Int      @id @default(autoincrement())
  type       String   @db.VarChar(45)
  identifier String   @unique(map: "credential_identifier_UNIQUE") @db.VarChar(45)
  password   String?  @db.VarChar(70)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  users      users    @relation(fields: [usersId], references: [id])
  usersId    Int
}

model keys {
  id   Int     @default(autoincrement())
  kid  String  @db.VarChar(100)
  type String  @db.VarChar(7)
  kty  String  @db.VarChar(10)
  n    String  @db.VarChar(360)
  e    String  @db.VarChar(4)
  d    String? @db.VarChar(360)
  p    String? @db.VarChar(200)
  q    String? @db.VarChar(200)
  dp   String? @db.VarChar(200)
  dq   String? @db.VarChar(200)
  qi   String? @db.VarChar(200)
  alg  String  @db.VarChar(5)

  @@id([id, kid])
}

model permissions {
  id              Int     @id @default(autoincrement())
  permission_name String  @unique(map: "permission_name_UNIQUE") @db.VarChar(45)
  roles           roles[]
}

model products {
  id          Int          @id @default(autoincrement())
  productname String?      @db.VarChar(45)
  sku         String       @unique(map: "sku_UNIQUE") @db.VarChar(11)
  price       Decimal?     @db.Decimal(6, 2)
  categories  categories[]
  tags        tags[]
  reviews     reviews[]
}

model roles {
  id          Int           @id @default(autoincrement())
  role_name   String        @unique(map: "role_name_UNIQUE") @db.VarChar(45)
  protected   Int           @default(0) @db.TinyInt
  permissions permissions[]
  users       users[]
}

model tags {
  id       Int        @id @default(autoincrement())
  tag_name String?    @unique(map: "tag_name_UNIQUE") @db.VarChar(45)
  products products[]
}

model tokens {
  id          Int      @id @default(autoincrement())
  sid         String   @unique(map: "sid_UNIQUE") @db.VarChar(45)
  fingerprint String   @unique(map: "fingerprint_UNIQUE") @db.VarChar(90)
  token       String   @unique(map: "token_UNIQUE") @db.VarChar(800)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  users       users    @relation(fields: [usersId], references: [id])
  usersId     Int
}

model users {
  id          Int           @id @default(autoincrement())
  created_at  DateTime      @default(now()) @db.Timestamp(0)
  updated_at  DateTime      @default(now()) @db.DateTime(0)
  firstname   String?       @db.VarChar(45)
  lastname    String?       @db.VarChar(45)
  reviews     reviews[]
  credentials credentials[]
  roles       roles[]
  tokens      tokens[]
}

model site_config {
  id           Int     @id @default(autoincrement())
  site_name    String? @db.VarChar(100)
  site_tagline String? @db.VarChar(100)
}

model reviews {
  id         Int      @id @default(autoincrement())
  review     String   @db.Text
  published  Int      @default(0) @db.TinyInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  users      users    @relation(fields: [usersId], references: [id])
  products   products @relation(fields: [productsId], references: [id])
  usersId    Int
  productsId Int
}
